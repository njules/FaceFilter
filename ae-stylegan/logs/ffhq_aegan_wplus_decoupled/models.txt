Name: ffhq_aegan_wplus_decoupled
--------------------------------------------------
Generator(
  (style): Sequential(
    (0): PixelNorm()
    (1): EqualLinear(512, 512)
    (2): EqualLinear(512, 512)
    (3): EqualLinear(512, 512)
    (4): EqualLinear(512, 512)
    (5): EqualLinear(512, 512)
    (6): EqualLinear(512, 512)
    (7): EqualLinear(512, 512)
    (8): EqualLinear(512, 512)
  )
  (input): ConstantInput()
  (conv1): StyledConv(
    (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
    (noise): NoiseInjection()
    (activate): LeakyReLU(negative_slope=0.01)
  )
  (to_rgb1): ToRGB(
    (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
  )
  (convs): ModuleList(
    (0): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (1): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (2): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (3): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (4): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (5): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (6): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (7): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (8): StyledConv(
      (conv): ModulatedConv2d(512, 256, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (9): StyledConv(
      (conv): ModulatedConv2d(256, 256, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
  )
  (upsamples): ModuleList()
  (to_rgbs): ModuleList(
    (0): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (1): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (2): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (3): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (4): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(256, 3, 1, upsample=False, downsample=False)
    )
  )
  (noises): Module()
)

Discriminator(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(513, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 1)
  )
)

Encoder(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 6144)
  )
)

Name: ffhq_aegan_wplus_decoupled
--------------------------------------------------
Generator(
  (style): Sequential(
    (0): PixelNorm()
    (1): EqualLinear(512, 512)
    (2): EqualLinear(512, 512)
    (3): EqualLinear(512, 512)
    (4): EqualLinear(512, 512)
    (5): EqualLinear(512, 512)
    (6): EqualLinear(512, 512)
    (7): EqualLinear(512, 512)
    (8): EqualLinear(512, 512)
  )
  (input): ConstantInput()
  (conv1): StyledConv(
    (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
    (noise): NoiseInjection()
    (activate): LeakyReLU(negative_slope=0.01)
  )
  (to_rgb1): ToRGB(
    (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
  )
  (convs): ModuleList(
    (0): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (1): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (2): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (3): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (4): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (5): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (6): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (7): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (8): StyledConv(
      (conv): ModulatedConv2d(512, 256, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (9): StyledConv(
      (conv): ModulatedConv2d(256, 256, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
  )
  (upsamples): ModuleList()
  (to_rgbs): ModuleList(
    (0): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (1): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (2): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (3): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (4): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(256, 3, 1, upsample=False, downsample=False)
    )
  )
  (noises): Module()
)

Discriminator(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(513, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 1)
  )
)

Encoder(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 6144)
  )
)

Name: ffhq_aegan_wplus_decoupled
--------------------------------------------------
Generator(
  (style): Sequential(
    (0): PixelNorm()
    (1): EqualLinear(512, 512)
    (2): EqualLinear(512, 512)
    (3): EqualLinear(512, 512)
    (4): EqualLinear(512, 512)
    (5): EqualLinear(512, 512)
    (6): EqualLinear(512, 512)
    (7): EqualLinear(512, 512)
    (8): EqualLinear(512, 512)
  )
  (input): ConstantInput()
  (conv1): StyledConv(
    (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
    (noise): NoiseInjection()
    (activate): LeakyReLU(negative_slope=0.01)
  )
  (to_rgb1): ToRGB(
    (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
  )
  (convs): ModuleList(
    (0): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (1): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (2): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (3): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (4): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (5): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (6): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (7): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (8): StyledConv(
      (conv): ModulatedConv2d(512, 256, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (9): StyledConv(
      (conv): ModulatedConv2d(256, 256, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
  )
  (upsamples): ModuleList()
  (to_rgbs): ModuleList(
    (0): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (1): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (2): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (3): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (4): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(256, 3, 1, upsample=False, downsample=False)
    )
  )
  (noises): Module()
)

Discriminator(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(513, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 1)
  )
)

Encoder(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 6144)
  )
)

Name: ffhq_aegan_wplus_decoupled
--------------------------------------------------
Generator(
  (style): Sequential(
    (0): PixelNorm()
    (1): EqualLinear(512, 512)
    (2): EqualLinear(512, 512)
    (3): EqualLinear(512, 512)
    (4): EqualLinear(512, 512)
    (5): EqualLinear(512, 512)
    (6): EqualLinear(512, 512)
    (7): EqualLinear(512, 512)
    (8): EqualLinear(512, 512)
  )
  (input): ConstantInput()
  (conv1): StyledConv(
    (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
    (noise): NoiseInjection()
    (activate): LeakyReLU(negative_slope=0.01)
  )
  (to_rgb1): ToRGB(
    (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
  )
  (convs): ModuleList(
    (0): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (1): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (2): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (3): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (4): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (5): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (6): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (7): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (8): StyledConv(
      (conv): ModulatedConv2d(512, 256, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (9): StyledConv(
      (conv): ModulatedConv2d(256, 256, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
  )
  (upsamples): ModuleList()
  (to_rgbs): ModuleList(
    (0): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (1): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (2): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (3): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (4): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(256, 3, 1, upsample=False, downsample=False)
    )
  )
  (noises): Module()
)

Discriminator(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(513, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 1)
  )
)

Encoder(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 6144)
  )
)

Name: ffhq_aegan_wplus_decoupled
--------------------------------------------------
Generator(
  (style): Sequential(
    (0): PixelNorm()
    (1): EqualLinear(512, 512)
    (2): EqualLinear(512, 512)
    (3): EqualLinear(512, 512)
    (4): EqualLinear(512, 512)
    (5): EqualLinear(512, 512)
    (6): EqualLinear(512, 512)
    (7): EqualLinear(512, 512)
    (8): EqualLinear(512, 512)
  )
  (input): ConstantInput()
  (conv1): StyledConv(
    (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
    (noise): NoiseInjection()
    (activate): LeakyReLU(negative_slope=0.01)
  )
  (to_rgb1): ToRGB(
    (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
  )
  (convs): ModuleList(
    (0): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (1): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (2): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (3): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (4): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (5): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (6): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (7): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (8): StyledConv(
      (conv): ModulatedConv2d(512, 256, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (9): StyledConv(
      (conv): ModulatedConv2d(256, 256, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
  )
  (upsamples): ModuleList()
  (to_rgbs): ModuleList(
    (0): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (1): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (2): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (3): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (4): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(256, 3, 1, upsample=False, downsample=False)
    )
  )
  (noises): Module()
)

Discriminator(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(513, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 1)
  )
)

Encoder(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 6144)
  )
)

Name: ffhq_aegan_wplus_decoupled
--------------------------------------------------
Generator(
  (style): Sequential(
    (0): PixelNorm()
    (1): EqualLinear(512, 512)
    (2): EqualLinear(512, 512)
    (3): EqualLinear(512, 512)
    (4): EqualLinear(512, 512)
    (5): EqualLinear(512, 512)
    (6): EqualLinear(512, 512)
    (7): EqualLinear(512, 512)
    (8): EqualLinear(512, 512)
  )
  (input): ConstantInput()
  (conv1): StyledConv(
    (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
    (noise): NoiseInjection()
    (activate): LeakyReLU(negative_slope=0.01)
  )
  (to_rgb1): ToRGB(
    (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
  )
  (convs): ModuleList(
    (0): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (1): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (2): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (3): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (4): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (5): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (6): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (7): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (8): StyledConv(
      (conv): ModulatedConv2d(512, 256, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (9): StyledConv(
      (conv): ModulatedConv2d(256, 256, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
  )
  (upsamples): ModuleList()
  (to_rgbs): ModuleList(
    (0): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (1): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (2): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (3): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (4): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(256, 3, 1, upsample=False, downsample=False)
    )
  )
  (noises): Module()
)

Discriminator(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(513, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 1)
  )
)

Encoder(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 6144)
  )
)

Name: ffhq_aegan_wplus_decoupled
--------------------------------------------------
Generator(
  (style): Sequential(
    (0): PixelNorm()
    (1): EqualLinear(512, 512)
    (2): EqualLinear(512, 512)
    (3): EqualLinear(512, 512)
    (4): EqualLinear(512, 512)
    (5): EqualLinear(512, 512)
    (6): EqualLinear(512, 512)
    (7): EqualLinear(512, 512)
    (8): EqualLinear(512, 512)
  )
  (input): ConstantInput()
  (conv1): StyledConv(
    (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
    (noise): NoiseInjection()
    (activate): LeakyReLU(negative_slope=0.01)
  )
  (to_rgb1): ToRGB(
    (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
  )
  (convs): ModuleList(
    (0): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (1): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (2): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (3): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (4): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (5): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (6): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (7): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (8): StyledConv(
      (conv): ModulatedConv2d(512, 256, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (9): StyledConv(
      (conv): ModulatedConv2d(256, 256, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
  )
  (upsamples): ModuleList()
  (to_rgbs): ModuleList(
    (0): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (1): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (2): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (3): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (4): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(256, 3, 1, upsample=False, downsample=False)
    )
  )
  (noises): Module()
)

Discriminator(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(513, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 1)
  )
)

Encoder(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 6144)
  )
)

Name: ffhq_aegan_wplus_decoupled
--------------------------------------------------
Generator(
  (style): Sequential(
    (0): PixelNorm()
    (1): EqualLinear(512, 512)
    (2): EqualLinear(512, 512)
    (3): EqualLinear(512, 512)
    (4): EqualLinear(512, 512)
    (5): EqualLinear(512, 512)
    (6): EqualLinear(512, 512)
    (7): EqualLinear(512, 512)
    (8): EqualLinear(512, 512)
  )
  (input): ConstantInput()
  (conv1): StyledConv(
    (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
    (noise): NoiseInjection()
    (activate): LeakyReLU(negative_slope=0.01)
  )
  (to_rgb1): ToRGB(
    (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
  )
  (convs): ModuleList(
    (0): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (1): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (2): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (3): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (4): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (5): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (6): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (7): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (8): StyledConv(
      (conv): ModulatedConv2d(512, 256, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (9): StyledConv(
      (conv): ModulatedConv2d(256, 256, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
  )
  (upsamples): ModuleList()
  (to_rgbs): ModuleList(
    (0): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (1): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (2): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (3): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (4): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(256, 3, 1, upsample=False, downsample=False)
    )
  )
  (noises): Module()
)

Discriminator(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(513, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 1)
  )
)

Encoder(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 6144)
  )
)

Name: ffhq_aegan_wplus_decoupled
--------------------------------------------------
Generator(
  (style): Sequential(
    (0): PixelNorm()
    (1): EqualLinear(512, 512)
    (2): EqualLinear(512, 512)
    (3): EqualLinear(512, 512)
    (4): EqualLinear(512, 512)
    (5): EqualLinear(512, 512)
    (6): EqualLinear(512, 512)
    (7): EqualLinear(512, 512)
    (8): EqualLinear(512, 512)
  )
  (input): ConstantInput()
  (conv1): StyledConv(
    (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
    (noise): NoiseInjection()
    (activate): LeakyReLU(negative_slope=0.01)
  )
  (to_rgb1): ToRGB(
    (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
  )
  (convs): ModuleList(
    (0): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (1): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (2): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (3): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (4): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (5): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (6): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (7): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (8): StyledConv(
      (conv): ModulatedConv2d(512, 256, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (9): StyledConv(
      (conv): ModulatedConv2d(256, 256, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
  )
  (upsamples): ModuleList()
  (to_rgbs): ModuleList(
    (0): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (1): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (2): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (3): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (4): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(256, 3, 1, upsample=False, downsample=False)
    )
  )
  (noises): Module()
)

Discriminator(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(513, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 1)
  )
)

Encoder(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 6144)
  )
)

Name: ffhq_aegan_wplus_decoupled
--------------------------------------------------
Generator(
  (style): Sequential(
    (0): PixelNorm()
    (1): EqualLinear(512, 512)
    (2): EqualLinear(512, 512)
    (3): EqualLinear(512, 512)
    (4): EqualLinear(512, 512)
    (5): EqualLinear(512, 512)
    (6): EqualLinear(512, 512)
    (7): EqualLinear(512, 512)
    (8): EqualLinear(512, 512)
  )
  (input): ConstantInput()
  (conv1): StyledConv(
    (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
    (noise): NoiseInjection()
    (activate): LeakyReLU(negative_slope=0.01)
  )
  (to_rgb1): ToRGB(
    (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
  )
  (convs): ModuleList(
    (0): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (1): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (2): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (3): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (4): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (5): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (6): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (7): StyledConv(
      (conv): ModulatedConv2d(512, 512, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (8): StyledConv(
      (conv): ModulatedConv2d(512, 256, 3, upsample=True, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
    (9): StyledConv(
      (conv): ModulatedConv2d(256, 256, 3, upsample=False, downsample=False)
      (noise): NoiseInjection()
      (activate): LeakyReLU(negative_slope=0.01)
    )
  )
  (upsamples): ModuleList()
  (to_rgbs): ModuleList(
    (0): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (1): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (2): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (3): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(512, 3, 1, upsample=False, downsample=False)
    )
    (4): ToRGB(
      (upsample): Upsample()
      (conv): ModulatedConv2d(256, 3, 1, upsample=False, downsample=False)
    )
  )
  (noises): Module()
)

Discriminator(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(513, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 1)
  )
)

Encoder(
  (convs): Sequential(
    (0): ConvLayer(
      (0): EqualConv2d(3, 256, 1, stride=1, padding=0)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(256, 256, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(256, 512, 1, stride=2, padding=0)
      )
    )
    (2): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (3): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (4): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
    (5): ResBlock(
      (conv1): ConvLayer(
        (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
        (1): LeakyReLU(negative_slope=0.01)
      )
      (conv2): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 3, stride=2, padding=0)
        (2): LeakyReLU(negative_slope=0.01)
      )
      (skip): ConvLayer(
        (0): Blur()
        (1): EqualConv2d(512, 512, 1, stride=2, padding=0)
      )
    )
  )
  (final_conv): ConvLayer(
    (0): EqualConv2d(512, 512, 3, stride=1, padding=1)
    (1): LeakyReLU(negative_slope=0.01)
  )
  (final_linear): Sequential(
    (0): Reshape()
    (1): EqualLinear(8192, 512)
    (2): EqualLinear(512, 6144)
  )
)

